# Yaml is white-space sensitive (use 2 spaces to indent).

###
# Define a new window with an id of 'bar'. This window can then be opened
# via the Zebar cli by running 'zebar open bar --args <ARGS...>'.
#
# Docs regarding window: https://some-future-docs-link.com
window/bar:
  providers: ['self']
  # Width of the window in physical pixels.
  width: '{{ self.args.MONITOR_WIDTH }}'
  # Height of the window in physical pixels.
  height: '30'
  # X-position of the window in physical pixels.
  position_x: '{{ self.args.MONITOR_X }}'
  # Y-position of the window in physical pixels.
  position_y: '{{ self.args.MONITOR_Y }}'
  # Whether to show the window above/below all others.
  # Allowed values: 'always_on_top', 'always_on_bottom', 'normal'.
  z_order: 'normal'
  # Whether the window should be shown in the taskbar.
  shown_in_taskbar: false
  # Whether the window should have resize handles.
  resizable: false
  # Styles to apply globally within the window. For example, we can use
  # this to import the Nerdfonts icon font. Ref https://www.nerdfonts.com/cheat-sheet
  # for a cheatsheet of available Nerdfonts icons.
  global_styles: |
    @import "https://www.nerdfonts.com/assets/css/webfont.css";
  # CSS styles to apply to the root element within the window. Using CSS
  # nesting, we can also target nested elements (e.g. below we set the
  # color and margin-right of icons).
  styles: |
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    align-items: top;
    height: 100%;
    color: rgb(255 255 255 / 90%);
    font-family: RobotoMono Nerd Font, Roboto, ui-monospace, monospace;
    font-weigth: 100;
    font-size: 12px;
    padding: 0px 8px;
    background: linear-gradient(rgb(0 0 0 / 60%), rgb(0 0 0 / 0%) );
  #  background: linear-gradient(rgb(0 0 0 / 90%), rgb(5 2 20 / 20%));


  group/left:
    styles: |
      display: flex;
      align-items: center;
      margin-top: 5px;
      background: #12121290;
      border-radius: 10px;
    # template/logo:
    #   styles: |
    #     margin-right: 20px;
    #   template: |
    #     <i class="nf nf-fa-windows"></i>

    template/glazewm_workspaces:
      styles: |
        display: flex;
        align-items: top;
        .workspace {
          background: #23213600;
          margin-right: 4px;
          color: #1a1b26;
          border: none;
          border-radius: 10px;
          cursor: pointer;
          &.displayed {
            color: #e1ffb6;
            background: #0a1d2400;
          }

          &.focused,
          &:hover {
            background: #0a1d2400;
            color: #e1ffb6;
          }
        }
      providers: ['glazewm']
      events:
        - type: 'click'
          fn_path: 'script.js#focusWorkspace'
          selector: '.workspace'
      template: |
        @for (workspace of glazewm.currentWorkspaces) {
          <button
            class="workspace {{ workspace.hasFocus ? 'focused' : '' }} {{ workspace.isDisplayed ? 'displayed' : '' }}"
            id="{{ workspace.name }}"
            onclick="handleClick('{{ workspace.name }}')"
          >
            <span style="pointer-events: none;">
              {{ workspace.displayName ?? workspace.name }}
            </span>
          </button>
        }

  group/center:
    styles: |
      justify-self: center;
      margin-top: 10px;
      width: 1200px;
      text-align: center;
      .wintitle {
          padding: 4px 8px;
          color: #e1ffb6;
        }
      
    template/glazewm_current_window:
      providers: ['glazewm']
      # styles: |
      #   .current-window {
      #     color: white; // make it pwetti
      #   }

      template: |
        @for (child of glazewm.focusedWorkspace.children) {
          @if (child?.hasFocus) {
            <i class="ti ti-focus-2"></i>
            {{ child.title }}
          }
        }

  group/right:
    styles: |
      justify-self: end;
      display: flex;
      color: #e1ffb6;
      margin-top: 5px;
      padding: 4px 8px;
      margin-top: 5px;
      background: #12121290;
      border-radius: 10px;
      border-right: 10px solid lightblue;
      .template {
        margin-left: 20px;
      }

    template/glazewm_other:
      providers: ['glazewm']
      styles: |
        .binding-mode,
        .tiling-direction {
          background: rgb(255 255 255 / 15%);
          color: #e1ffb6;
          border-radius: 2px;
          padding: 4px 6px;
          margin: 0;
        }

      template: |
        @for (bindingMode of glazewm.bindingModes) {
          <span class="binding-mode">
            {{ bindingMode.displayName ?? bindingMode.name }}
          </span>
        }

        @if (glazewm.tilingDirection === 'horizontal') {
          <i class="tiling-direction nf nf-md-swap_horizontal"></i>
        } @else {
          <i class="tiling-direction nf nf-md-swap_vertical"></i>
        }

    # template/network:
    #   providers: ['network']
    #   template: |
    #     <!-- Show icon based on signal strength. -->
    #     @if (network.defaultInterface?.type === 'ethernet') {
    #       <i class="nf nf-md-ethernet_cable"></i>
    #     } @else if (network.defaultInterface?.type === 'wifi') {
    #       @if (network.defaultGateway?.signalStrength >= 80) {<i class="nf nf-md-wifi_strength_4"></i>}
    #       @else if (network.defaultGateway?.signalStrength >= 65) {<i class="nf nf-md-wifi_strength_3"></i>}
    #       @else if (network.defaultGateway?.signalStrength >= 40) {<i class="nf nf-md-wifi_strength_2"></i>}
    #       @else if (network.defaultGateway?.signalStrength >= 25) {<i class="nf nf-md-wifi_strength_1"></i>}
    #       @else {<i class="nf nf-md-wifi_strength_outline"></i>}
    #       {{ network.defaultGateway?.ssid }}
    #     } @else {
    #       <i class="nf nf-md-wifi_strength_off_outline"></i>
    #     }

    template/memory:
      providers: ['memory']
      template: |
        <i class="nf nf-fae-chip"></i>
        {{ Math.round(memory.usage) }}%

    template/cpu:
      providers: ['cpu']
      styles: |
        .high-usage {
          color: #900029;
        }
      template: |
        <i class="nf nf-oct-cpu"></i>

        <!-- Change the text color if the CPU usage is high. -->
        @if (cpu.usage > 85) {
          <span class="high-usage">{{ Math.round(cpu.usage) }}%</span>
        } @else {
          <span>{{ Math.round(cpu.usage) }}%</span>
        }

    template/clock:
      providers: ['date'] 
      # Available date tokens: https://moment.github.io/luxon/#/formatting?id=table-of-tokens
      template: |
        {{ date.toFormat(date.now, 'yyyy-MM-dd ● t') }}
    # template/weather:
    #   providers: ['weather']
    #   template: |
    #     @switch (weather.status) {
    #       @case ('clear_day') {<i class="nf nf-weather-day_sunny"></i>}
    #       @case ('clear_night') {<i class="nf nf-weather-night_clear"></i>}
    #       @case ('cloudy_day') {<i class="nf nf-weather-day_cloudy"></i>}
    #       @case ('cloudy_night') {<i class="nf nf-weather-night_alt_cloudy"></i>}
    #       @case ('light_rain_day') {<i class="nf nf-weather-day_sprinkle"></i>}
    #       @case ('light_rain_night') {<i class="nf nf-weather-night_alt_sprinkle"></i>}
    #       @case ('heavy_rain_day') {<i class="nf nf-weather-day_rain"></i>}
    #       @case ('heavy_rain_night') {<i class="nf nf-weather-night_alt_rain"></i>}
    #       @case ('snow_day') {<i class="nf nf-weather-day_snow"></i>}
    #       @case ('snow_night') {<i class="nf nf-weather-night_alt_snow"></i>}
    #       @case ('thunder_day') {<i class="nf nf-weather-day_lightning"></i>}
    #       @case ('thunder_night') {<i class="nf nf-weather-night_alt_lightning"></i>}
    #     }
    #     {{ weather.celsiusTemp }}°
